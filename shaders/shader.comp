#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1000
#define HEIGHT 1000
#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
    vec4 value;
};

struct Circle {
    vec3 color;
    float padding[1];
    vec2 position;
    float padding2[2];
};

layout(std430, binding = 0) buffer buf
{
    Pixel imageData[];
};

layout(std430, binding = 1) buffer col
{
    Circle a[];
};

layout(std430, binding = 2) buffer len
{
    int length;
};

void main() {
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) {
        return;
    }

    vec4 color = vec4(0.0, 0.0, 0.0, 1);

    for (int i = 0; i < length; i++) {
        Circle c = a[i];

        float x = 10 * float(gl_GlobalInvocationID.x) / float(WIDTH) - c.position.x;
        float y = 10 * float(gl_GlobalInvocationID.y) / float(HEIGHT) - c.position.y;

        float dist = 1 * (x * x + y * y);
        float d = 0.1 / sqrt(dist);
        color += vec4(c.color * d, 0);
    }

    imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = clamp(color, 0, 1);
}

// vim: set filetype=glsl :
