#version 450

#define WORKGROUP_SIZE 32

#extension GL_GOOGLE_include_directive : require

#include "nandi/n_graphics_shader.h"

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
    uint value;
};

struct Circle {
    N_Vec3_F32 color;
    float padding[1];
    N_Vec2_F32 position;
    float padding2[2];
};

BUFFER(frame_buffer, 0) {
    Pixel imageData[];
};

BUFFER(circles_buffer, 1) {
    Circle circles[];
};

float linear_to_srgb(float linear) {
    if (linear <= 0.0031308)
        return 12.92 * linear;
    return 1.055 * pow(linear, 1.0 / 2.4) - 0.055;
}


void main() {
    int width = frame_buffer_size_x;
    int height = frame_buffer_size_y;
    if (gl_GlobalInvocationID.x >= width || gl_GlobalInvocationID.y >= height) {
        return;
    }

    vec4 color = vec4(0.0, 0.0, 0.0, 1);

    float pos_x = 10 * float(gl_GlobalInvocationID.x) / float(width);
    float pos_y = 10 * float(gl_GlobalInvocationID.y) / float(height);

    for (int i = 0; i < circles_buffer_size_x; i++) {
        Circle c = circles[i];

        float x = pos_x - c.position.x;
        float y = pos_y - c.position.y;

        float d = 0.1 * inversesqrt(x * x + y * y);
        color += vec4(c.color * d, 0);
    }

    uint bgra = packUnorm4x8(color.bgra);

    imageData[width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = bgra;
}

// vim: set filetype=c :
