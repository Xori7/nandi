#version 450

#define WIDTH 1920
#define HEIGHT 1080
#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
    uint value;
};

struct Circle {
    vec3 color;
    float padding[1];
    vec2 position;
    float padding2[2];
};

layout(std430, binding = 0) buffer buf
{
    Pixel imageData[];
};

layout(std430, binding = 2) readonly buffer col
{
    Circle a[];
};

layout(std430, binding = 3) buffer len
{
    int length;
};

float linear_to_srgb(float linear) {
    if (linear <= 0.0031308)
        return 12.92 * linear;
    return 1.055 * pow(linear, 1.0 / 2.4) - 0.055;
}


void main() {
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) {
        return;
    }

    //vec4 color = vec4(0.0, 0.0, 0.0, 1);

    //float pos_x = 10 * float(gl_GlobalInvocationID.x) / float(WIDTH);
    //float pos_y = 10 * float(gl_GlobalInvocationID.y) / float(HEIGHT);

    //for (int i = 0; i < length; i++) {
    //    Circle c = sharedCircles[i];

    //    float x = pos_x - c.position.x;
    //    float y = pos_y - c.position.y;

    //    float d = 0.1 * inversesqrt(x * x + y * y);
    //    color += vec4(c.color * d, 0);
    //}

    //uint bgra = packUnorm4x8(color.bgra);

    imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = 1000;// bgra;
}

// vim: set filetype=glsl :
